<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>max_groups = 4
max_lines = 4
max_dots = 4
line_spread = 0.3
posttheta = pi/4

for (group = 0; group &lt; max_groups; group++) {
    gu = 0
    gv = power(-1, group)  // flip every second group on its head
    gw = 0
    group_offset = group/max_groups * 2 * pi  // spin group evenly around y-axis
    for (line = 0; line &lt; max_lines; line++) {
        line_offset = (line - (max_lines - 1) / 2) * line_spread
        if (line == 0 or line == max_lines - 1) {
            colour = $f7ab00
        } else {
            colour = c_white
        }
        for (dot = 0; dot &lt; max_dots; dot++) {
            off = group_offset + line_offset
            theta = pi * (dot+1)/(max_dots+1)
            d = instance_create(x, y, objSphereDot)

            tu = gu
            tv = gv * cos(theta) - gw * sin(theta)
            tw = gv * sin(theta) + gw * cos(theta)
            ru =  tu * cos(off) + tw * sin(off)
            rv =  tv
            rw = -tu * sin(off) + tw * cos(off)
            d.u = ru
            d.v = rv
            d.w = rw
            pu = ru
            pv = rv * cos(posttheta) - rw * sin(posttheta)
            pw = rv * sin(posttheta) + rw * cos(posttheta)
            d.u = pu
            d.v = pv
            d.w = pw
            d.image_blend = colour
            d.radius_x = 16 * image_xscale
            d.radius_y = 16 * image_yscale
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
